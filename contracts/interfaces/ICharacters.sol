// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Interface generated by solface: https://github.com/bugout-dev/solface
// solface version: 0.0.4
interface ICharacters {
	// structs

	// events
	event Approval(address owner, address operator, uint256 tokenId);
	event ApprovalForAll(address owner, address operator, bool approved);
	event ContractInformationSet(string name, string symbol, string uri);
	event InventorySet(address inventoryAddress);
	event TokenURISet(uint256 tokenId, address changer, string uri);
	event TokenValiditySet(uint256 tokenId, address changer, bool valid);
	event Transfer(address from, address to, uint256 tokenId);

	// functions
	function approve(address operator, uint256 tokenId) external ;
	function balanceOf(address account) external view returns (uint256);
	function contractURI() external view returns (string memory);
	function createCharacter(address player) external  returns (uint256);
	function getApproved(uint256 tokenId) external view returns (address);
	function init(address adminTerminusAddress, uint256 adminTerminusPoolId, uint256 characterCreationTerminusPoolId, string memory contractName, string memory contractSymbol, string memory contractUri) external ;
	function inventory() external view returns (address);
	function isApprovedForAll(address account, address operator) external view returns (bool);
	function isMetadataValid(uint256 tokenId) external view returns (bool);
	function name() external view returns (string memory);
	function ownerOf(uint256 tokenId) external view returns (address);
	function safeTransferFrom(address from, address to, uint256 tokenId) external ;
	function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external ;
	function setApprovalForAll(address operator, bool status) external ;
	function setContractInformation(string memory contractName, string memory contractSymbol, string memory contractUri) external ;
	function setInventory(address inventoryAddress) external ;
	function setMetadataValidity(uint256 tokenId, bool valid) external ;
	function setTokenUri(uint256 tokenId, string memory uri, bool isAppropriatelyLicensed) external ;
	function supportsInterface(bytes4 interfaceId) external pure returns (bool);
	function symbol() external view returns (string memory);
	function tokenByIndex(uint256 index) external view returns (uint256);
	function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
	function tokenURI(uint256 tokenId) external view returns (string memory);
	function totalSupply() external view returns (uint256);
	function transferFrom(address from, address to, uint256 tokenId) external ;

	// errors
	error AddressUtils__NotContract();
	error ERC721Base__BalanceQueryZeroAddress();
	error ERC721Base__ERC721ReceiverNotImplemented();
	error ERC721Base__InvalidOwner();
	error ERC721Base__MintToZeroAddress();
	error ERC721Base__NonExistentToken();
	error ERC721Base__NotOwnerOrApproved();
	error ERC721Base__NotTokenOwner();
	error ERC721Base__SelfApproval();
	error ERC721Base__TokenAlreadyMinted();
	error ERC721Base__TransferToZeroAddress();
	error EnumerableMap__IndexOutOfBounds();
	error EnumerableMap__NonExistentKey();
	error EnumerableSet__IndexOutOfBounds();
}
